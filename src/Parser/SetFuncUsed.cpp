/*
	MIT License

	Copyright (c) 2022 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "Parser/Stmts.hpp"

namespace sc
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBlock::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	for(auto &stmt : stmts) {
		stmt->_setFuncUsed(inc, done);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtType::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	expr->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtSimple /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtSimple::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtFnCallInfo ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnCallInfo::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	for(auto &a : args) {
		a->_setFuncUsed(inc, done);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExpr::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	lhs->_setFuncUsed(inc, done);
	if(rhs) rhs->_setFuncUsed(inc, done);
	if(calledfn && calledfn->getVar() && calledfn->getVar()->getVVal() &&
	   calledfn->getVar()->getVVal()->isFnDef())
	{
		calledfn->getVar()->_setFuncUsed(inc, done);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVar::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	if(vtype) vtype->_setFuncUsed(inc, done);
	if(vval) vval->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnSig::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	for(auto &a : args) a->_setFuncUsed(inc, done);
	if(rettype) rettype->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnDef::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	if(!inc) {
		if(used > 0) --used;
	} else {
		++used;
	}
	sig->_setFuncUsed(inc, done);
	if(blk) blk->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtHeader /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtHeader::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtLib //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtLib::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtExtern /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExtern::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	if(headers) headers->_setFuncUsed(inc, done);
	if(libs) libs->_setFuncUsed(inc, done);
	entity->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtEnum //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtEnum::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtStruct //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtStruct::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	for(auto &f : fields) f->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtVarDecl /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVarDecl::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	for(auto &d : decls) d->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtCond::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	for(auto &c : conds) {
		if(c.getCond()) c.getCond()->_setFuncUsed(inc, done);
		if(c.getBlk()) c.getBlk()->_setFuncUsed(inc, done);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFor::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	if(init) init->_setFuncUsed(inc, done);
	if(cond) cond->_setFuncUsed(inc, done);
	if(incr) incr->_setFuncUsed(inc, done);
	if(blk) blk->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtWhile ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtWhile::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	if(cond) cond->_setFuncUsed(inc, done);
	if(blk) blk->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtRet::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	if(val) val->_setFuncUsed(inc, done);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtContinue ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtContinue::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBreak::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtDefer ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtDefer::_setFuncUsed(const bool &inc, std::unordered_set<Stmt *> &done)
{
	if(done.find(this) != done.end()) return;
	done.insert(this);
	if(val) val->_setFuncUsed(inc, done);
}

} // namespace sc