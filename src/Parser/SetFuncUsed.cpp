/*
	MIT License

	Copyright (c) 2021 Scribe Language Repositories

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"), to
	deal in the Software without restriction, including without limitation the
	rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so.
*/

#include "Parser/Stmts.hpp"

namespace sc
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBlock::_setFuncUsed(const bool &inc)
{
	for(auto &stmt : stmts) {
		stmt->_setFuncUsed(inc);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtType::_setFuncUsed(const bool &inc)
{
	expr->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtSimple /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtSimple::_setFuncUsed(const bool &inc) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtFnCallInfo ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnCallInfo::_setFuncUsed(const bool &inc)
{
	for(auto &a : args) {
		a->_setFuncUsed(inc);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExpr::_setFuncUsed(const bool &inc)
{
	lhs->_setFuncUsed(inc);
	if(rhs) rhs->_setFuncUsed(inc);
	if(calledfn && calledfn->getVar() && calledfn->getVar()->getVVal() &&
	   calledfn->getVar()->getVVal()->isFnDef())
	{
		calledfn->getVar()->_setFuncUsed(inc);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVar::_setFuncUsed(const bool &inc)
{
	if(vtype) vtype->_setFuncUsed(inc);
	if(vval) vval->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnSig::_setFuncUsed(const bool &inc)
{
	for(auto &a : args) a->_setFuncUsed(inc);
	if(rettype) rettype->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFnDef::_setFuncUsed(const bool &inc)
{
	if(!inc) {
		if(used > 0) --used;
	} else {
		++used;
	}
	sig->_setFuncUsed(inc);
	if(blk) blk->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtHeader /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtHeader::_setFuncUsed(const bool &inc) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtLib //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtLib::_setFuncUsed(const bool &inc) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtExtern /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtExtern::_setFuncUsed(const bool &inc)
{
	if(headers) headers->_setFuncUsed(inc);
	if(libs) libs->_setFuncUsed(inc);
	entity->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// StmtEnum //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtEnum::_setFuncUsed(const bool &inc) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtStruct //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtStruct::_setFuncUsed(const bool &inc)
{
	for(auto &f : fields) f->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtVarDecl /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtVarDecl::_setFuncUsed(const bool &inc)
{
	for(auto &d : decls) d->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtCond::_setFuncUsed(const bool &inc)
{
	for(auto &c : conds) {
		if(c.getCond()) c.getCond()->_setFuncUsed(inc);
		if(c.getBlk()) c.getBlk()->_setFuncUsed(inc);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtForIn //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtForIn::_setFuncUsed(const bool &inc)
{
	in->_setFuncUsed(inc);
	if(blk) blk->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtFor::_setFuncUsed(const bool &inc)
{
	if(init) init->_setFuncUsed(inc);
	if(cond) cond->_setFuncUsed(inc);
	if(incr) incr->_setFuncUsed(inc);
	if(blk) blk->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtWhile ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtWhile::_setFuncUsed(const bool &inc)
{
	if(cond) cond->_setFuncUsed(inc);
	if(blk) blk->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtRet::_setFuncUsed(const bool &inc)
{
	if(val) val->_setFuncUsed(inc);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtContinue ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtContinue::_setFuncUsed(const bool &inc) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtBreak::_setFuncUsed(const bool &inc) {}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtDefer ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void StmtDefer::_setFuncUsed(const bool &inc)
{
	if(val) val->_setFuncUsed(inc);
}

} // namespace sc