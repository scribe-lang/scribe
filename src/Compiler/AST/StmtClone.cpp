#include "AST/Stmts.hpp"

namespace sc::AST
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtBlock::clone(Context &ctx)
{
	Vector<Stmt *> newstmts;
	for(auto &stmt : stmts) {
		newstmts.push_back(stmt->clone(ctx));
	}
	Stmt *res = StmtBlock::create(ctx, getLoc(), newstmts, is_top);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtType /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtType::clone(Context &ctx)
{
	Stmt *res = StmtType::create(ctx, getLoc(), expr->clone(ctx));
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtSimple /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtSimple::clone(Context &ctx)
{
	StmtSimple *newsim = StmtSimple::create(ctx, getLoc(), val);
	newsim->setAttributes(attrs);
	return newsim;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// StmtFnCallInfo ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtCallArgs::clone(Context &ctx)
{
	Vector<Stmt *> newargs;
	for(auto &a : args) {
		newargs.push_back(a->clone(ctx));
	}
	Stmt *res = StmtCallArgs::create(ctx, getLoc(), newargs);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtExpr::clone(Context &ctx)
{
	StmtExpr *newexpr =
	StmtExpr::create(ctx, getLoc(), commas, lhs ? lhs->clone(ctx) : nullptr, oper,
			 rhs ? rhs->clone(ctx) : nullptr, is_intrinsic_call);
	newexpr->or_blk	    = or_blk ? as<StmtBlock>(or_blk->clone(ctx)) : nullptr;
	newexpr->or_blk_var = or_blk_var;
	return newexpr;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtVar::clone(Context &ctx)
{
	StmtType *newvtype = vtype ? as<StmtType>(vtype->clone(ctx)) : nullptr;
	Stmt *newvval	   = vval ? vval->clone(ctx) : nullptr;
	StmtVar *res	   = StmtVar::create(ctx, getLoc(), name, newvtype, newvval);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtSignature::clone(Context &ctx)
{
	Vector<StmtVar *> newargs;
	for(auto &a : args) {
		newargs.push_back(as<StmtVar>(a->clone(ctx)));
	}
	StmtType *newrettype = rettype ? as<StmtType>(rettype->clone(ctx)) : nullptr;
	Stmt *res	     = StmtSignature::create(ctx, getLoc(), newargs, newrettype, sigty);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtFnDef::clone(Context &ctx)
{
	StmtSignature *newsig = as<StmtSignature>(sig->clone(ctx));
	StmtBlock *newblk     = blk ? as<StmtBlock>(blk->clone(ctx)) : nullptr;
	Stmt *res	      = StmtFnDef::create(ctx, getLoc(), newsig, newblk);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtVarDecl /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtVarDecl::clone(Context &ctx)
{
	Vector<StmtVar *> newdecls;
	for(auto &d : decls) {
		newdecls.push_back(as<StmtVar>(d->clone(ctx)));
	}
	Stmt *res = StmtVarDecl::create(ctx, getLoc(), newdecls);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtCond::clone(Context &ctx)
{
	Vector<Conditional> newconds;
	for(auto &c : conds) {
		Stmt *newcond	  = c.getCond() ? c.getCond()->clone(ctx) : nullptr;
		StmtBlock *newblk = as<StmtBlock>(c.getBlk()->clone(ctx));
		newconds.push_back(Conditional(newcond, newblk));
	}
	Stmt *res = StmtCond::create(ctx, getLoc(), std::move(newconds), is_inline);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtFor::clone(Context &ctx)
{
	Stmt *newinit	  = init ? init->clone(ctx) : nullptr;
	Stmt *newcond	  = cond ? cond->clone(ctx) : nullptr;
	Stmt *newincr	  = incr ? incr->clone(ctx) : nullptr;
	StmtBlock *newblk = blk ? as<StmtBlock>(blk->clone(ctx)) : nullptr;
	Stmt *res = StmtFor::create(ctx, getLoc(), newinit, newcond, newincr, newblk, is_inline);
	res->setAttributes(attrs);
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

Stmt *StmtOneWord::clone(Context &ctx)
{
	Stmt *newval	 = arg ? arg->clone(ctx) : nullptr;
	StmtOneWord *res = StmtOneWord::create(ctx, getLoc(), newval, wordty);
	res->setAttributes(attrs);
	return res;
}

} // namespace sc::AST